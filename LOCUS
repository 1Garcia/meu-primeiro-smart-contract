// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IDEXRouter {
    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);
    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
}

contract LocusToken {
    string public name = "LOCUS";
    string public symbol = "LC";
    uint8 public decimals = 18;
    uint256 public totalSupply = 300000 * 10 ** uint256(decimals);

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    mapping(address => bool) public isExcludedFromFee;

    address public owner;
    uint256 public feePercent = 6;
    address public constant BUSD_TOKEN_ADDRESS = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;
    address public constant PROJECT_WALLET_ADDRESS = 0x446b20B72619149F789536586F327322995C1FbC;
    address public constant BURN_WALLET_ADDRESS = 0x1111111111111111111111111111111111111111;
    IDEXRouter public router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        owner = msg.sender;
        balanceOf[owner] = totalSupply;
        isExcludedFromFee[owner] = true;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    function setOwner(address _owner) external onlyOwner {
        require(_owner != address(0), "Invalid address");
        owner = _owner;
    }

    function setFeePercent(uint256 _feePercent) external onlyOwner {
        require(_feePercent <= 10, "Fee percent can not exceed 10%");
        feePercent = _feePercent;
    }

    function excludeFromFee(address account) external onlyOwner {
        isExcludedFromFee[account] = true;
    }

    function includeInFee(address account) external onlyOwner {
        isExcludedFromFee[account] = false;
    }

    function _transfer(address from, address to, uint256 amount) internal {
        require(from != address(0), "Transfer from the zero address");
        require(to != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        
        uint256 feeAmount = 0;
        if (!isExcludedFromFee[from] && !isExcludedFromFee[to]) {
            feeAmount = amount * feePercent / 100;
            amount -= feeAmount;
        }
        
        balanceOf[from] -= amount;
        balanceOf[to] += amount;

if (feeAmount > 0) {
            address[] memory path = new address[](2);
            path[0] = address(this);
            path[1] = BUSD_TOKEN_ADDRESS;

            uint256[] memory amounts = router.getAmountsOut(feeAmount, path);
            uint256 busdAmount = amounts[1];

            balanceOf[PROJECT_WALLET_ADDRESS] += busdAmount;
            balanceOf[BURN_WALLET_ADDRESS] += feeAmount - busdAmount;
            emit Transfer(address(this), PROJECT_WALLET_ADDRESS, busdAmount);
            emit Transfer(address(this), BURN_WALLET_ADDRESS, feeAmount - busdAmount);
        }

        emit Transfer(from, to, amount);
    }

    function transfer(address to, uint256 amount) external returns (bool success) {
        _transfer(msg.sender, to, amount);
        return true;
    }

    function approve(address spender, uint256 amount) external returns (bool success) {
        require(spender != address(0), "Approval to the zero address");
        require(amount > 0, "Approval amount must be greater than zero");

        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) external returns (bool success) {
        require(from != address(0), "Transfer from the zero address");
        require(to != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(amount <= balanceOf[from], "Insufficient balance");
        require(amount <= allowance[from][msg.sender], "Insufficient allowance");

        allowance[from][msg.sender] -= amount;
        _transfer(from, to, amount);
        return true;
    }
}

